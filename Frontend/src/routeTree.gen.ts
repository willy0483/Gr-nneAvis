/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CategoryRouteRouteImport } from './routes/category/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as CategoryIndexRouteImport } from './routes/category/index'
import { Route as ProductsProductRouteImport } from './routes/products/$product'
import { Route as CategoryCategoryRouteImport } from './routes/category/$category'
import { Route as authSignupIndexRouteImport } from './routes/(auth)/signup/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'
import { Route as CategoryProductProductRouteImport } from './routes/category/product/$product'

const CategoryRouteRoute = CategoryRouteRouteImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoryIndexRoute = CategoryIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CategoryRouteRoute,
} as any)
const ProductsProductRoute = ProductsProductRouteImport.update({
  id: '/products/$product',
  path: '/products/$product',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoryCategoryRoute = CategoryCategoryRouteImport.update({
  id: '/$category',
  path: '/$category',
  getParentRoute: () => CategoryRouteRoute,
} as any)
const authSignupIndexRoute = authSignupIndexRouteImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => authRouteRoute,
} as any)
const CategoryProductProductRoute = CategoryProductProductRouteImport.update({
  id: '/product/$product',
  path: '/product/$product',
  getParentRoute: () => CategoryRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/category': typeof CategoryRouteRouteWithChildren
  '/category/$category': typeof CategoryCategoryRoute
  '/products/$product': typeof ProductsProductRoute
  '/category/': typeof CategoryIndexRoute
  '/products': typeof ProductsIndexRoute
  '/category/product/$product': typeof CategoryProductProductRoute
  '/login': typeof authLoginIndexRoute
  '/signup': typeof authSignupIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/category/$category': typeof CategoryCategoryRoute
  '/products/$product': typeof ProductsProductRoute
  '/category': typeof CategoryIndexRoute
  '/products': typeof ProductsIndexRoute
  '/category/product/$product': typeof CategoryProductProductRoute
  '/login': typeof authLoginIndexRoute
  '/signup': typeof authSignupIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/category': typeof CategoryRouteRouteWithChildren
  '/category/$category': typeof CategoryCategoryRoute
  '/products/$product': typeof ProductsProductRoute
  '/category/': typeof CategoryIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/category/product/$product': typeof CategoryProductProductRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/signup/': typeof authSignupIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/category'
    | '/category/$category'
    | '/products/$product'
    | '/category/'
    | '/products'
    | '/category/product/$product'
    | '/login'
    | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/category/$category'
    | '/products/$product'
    | '/category'
    | '/products'
    | '/category/product/$product'
    | '/login'
    | '/signup'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/category'
    | '/category/$category'
    | '/products/$product'
    | '/category/'
    | '/products/'
    | '/category/product/$product'
    | '/(auth)/login/'
    | '/(auth)/signup/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  CategoryRouteRoute: typeof CategoryRouteRouteWithChildren
  ProductsProductRoute: typeof ProductsProductRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/category': {
      id: '/category'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof CategoryRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/category/': {
      id: '/category/'
      path: '/'
      fullPath: '/category/'
      preLoaderRoute: typeof CategoryIndexRouteImport
      parentRoute: typeof CategoryRouteRoute
    }
    '/products/$product': {
      id: '/products/$product'
      path: '/products/$product'
      fullPath: '/products/$product'
      preLoaderRoute: typeof ProductsProductRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/category/$category': {
      id: '/category/$category'
      path: '/$category'
      fullPath: '/category/$category'
      preLoaderRoute: typeof CategoryCategoryRouteImport
      parentRoute: typeof CategoryRouteRoute
    }
    '/(auth)/signup/': {
      id: '/(auth)/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/category/product/$product': {
      id: '/category/product/$product'
      path: '/product/$product'
      fullPath: '/category/product/$product'
      preLoaderRoute: typeof CategoryProductProductRouteImport
      parentRoute: typeof CategoryRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
  authSignupIndexRoute: typeof authSignupIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
  authSignupIndexRoute: authSignupIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface CategoryRouteRouteChildren {
  CategoryCategoryRoute: typeof CategoryCategoryRoute
  CategoryIndexRoute: typeof CategoryIndexRoute
  CategoryProductProductRoute: typeof CategoryProductProductRoute
}

const CategoryRouteRouteChildren: CategoryRouteRouteChildren = {
  CategoryCategoryRoute: CategoryCategoryRoute,
  CategoryIndexRoute: CategoryIndexRoute,
  CategoryProductProductRoute: CategoryProductProductRoute,
}

const CategoryRouteRouteWithChildren = CategoryRouteRoute._addFileChildren(
  CategoryRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  CategoryRouteRoute: CategoryRouteRouteWithChildren,
  ProductsProductRoute: ProductsProductRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
